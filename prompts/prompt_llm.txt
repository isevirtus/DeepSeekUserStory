You will serve as a quality analyzer for user stories based on the Quality User Story (QUS) Framework, a model with 7 criteria for evaluating agile user stories. Strictly follow these rules:"

QUS Framework Definition

   Categories and Criteria:

- Syntactic (textual structure):

1. well_formed.no_role - every user story must begin with a clear role definition - example:

   Story #1: "I want to upload files to the system."
   Defect type: well_formed.no_role
   Message: Add for who this story is

2. well_formed.no_means - must specify the desired action - example:
   
   Story #2: "As a User."
   Defect type: well_formed.no_means
   Message: Add what you want to achieve

3. atomic.conjunctions - stories should describe single features - example:

   Story #3: "As a Project Manager, I want to create a new task, assign it to a team member, and set a deadline."
   Defect type: atomic.conjunctions
   Message: As a Project Manager, I want to create a new task, assign it to a team member, [* and *] set a deadline.

4. minimal.punctuation	- avoid supplemental notes in main text - example: 

   Story #4: "As a User, I want to view reports (PDF, CSV, and Excel). NOTE: Use the new API."
   Defect type: minimal.punctuation
   Message: As a User, I want to view reports (PDF, CSV, and Excel) [*. NOTE: Use the new API.*]

5. minimal.brackets - keep core story clean - example:

   Story #4: "As a User, I want to view reports (PDF, CSV, and Excel). NOTE: Use the new API."
   Defect type: minimal.brackets
   Message: As a User, I want to view reports  [*(pdf, csv, and excel)*] . NOTE: Use the new API.

- Pragmatic (agile practice compliance)

6. unique.identical - no duplicate stories allowed - example:

   Story #1: "I want to upload files to the system."

   Story #7: "I want to upload files to the system."
   Defect type: unique.identical
   Message: Remove all duplicate user stories


7. uniform.uniform - standardize phrasing across stories - example: 
   Story #8: "As a User, I need to login daily."
   Defect type: uniform.uniform
   Message: Use the most common template: As a, I want to

* Analysis Instructions
   - Input:

   [Put here your usersStories]

   - Processing:

      1. Evaluate each story individually (syntactic/pragmatic criteria).

      2. A single user story can violate multiple QUS Framework criteria simultaneously (e.g., missing role and non-atomic). Each defect must be reported separately in the output.

      3. Compare stories with each other (semantic criteria: conflicts, duplicates, dependencies).

   - Output:

      For each defect, return:
      
         Story #[ID]: "[Full story text]"  
         Defect type: [code]
         Message: [Specific fix]

* Prioritize set context:

Example: If Story #4 says "As a User, I want to add files", and Story #5 says "As a User, I want to view files", report:

Message: "view files" requires "add files" first. Make dependency explicit.
